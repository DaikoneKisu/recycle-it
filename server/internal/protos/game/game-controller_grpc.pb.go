// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: game/game-controller.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameController_HostGame_FullMethodName  = "/game.GameController/HostGame"
	GameController_StartGame_FullMethodName = "/game.GameController/StartGame"
	GameController_JoinGame_FullMethodName  = "/game.GameController/JoinGame"
	GameController_PlayGame_FullMethodName  = "/game.GameController/PlayGame"
)

// GameControllerClient is the client API for GameController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameControllerClient interface {
	HostGame(ctx context.Context, in *HostGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HostGameResponse], error)
	StartGame(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StartGameRequest, StartGameResponse], error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGameResponse], error)
	PlayGame(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlayGameRequest, PlayGameResponse], error)
}

type gameControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameControllerClient(cc grpc.ClientConnInterface) GameControllerClient {
	return &gameControllerClient{cc}
}

func (c *gameControllerClient) HostGame(ctx context.Context, in *HostGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HostGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[0], GameController_HostGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HostGameRequest, HostGameResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_HostGameClient = grpc.ServerStreamingClient[HostGameResponse]

func (c *gameControllerClient) StartGame(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StartGameRequest, StartGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[1], GameController_StartGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartGameRequest, StartGameResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_StartGameClient = grpc.BidiStreamingClient[StartGameRequest, StartGameResponse]

func (c *gameControllerClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[2], GameController_JoinGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinGameRequest, JoinGameResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_JoinGameClient = grpc.ServerStreamingClient[JoinGameResponse]

func (c *gameControllerClient) PlayGame(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlayGameRequest, PlayGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[3], GameController_PlayGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlayGameRequest, PlayGameResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_PlayGameClient = grpc.BidiStreamingClient[PlayGameRequest, PlayGameResponse]

// GameControllerServer is the server API for GameController service.
// All implementations must embed UnimplementedGameControllerServer
// for forward compatibility.
type GameControllerServer interface {
	HostGame(*HostGameRequest, grpc.ServerStreamingServer[HostGameResponse]) error
	StartGame(grpc.BidiStreamingServer[StartGameRequest, StartGameResponse]) error
	JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinGameResponse]) error
	PlayGame(grpc.BidiStreamingServer[PlayGameRequest, PlayGameResponse]) error
	mustEmbedUnimplementedGameControllerServer()
}

// UnimplementedGameControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameControllerServer struct{}

func (UnimplementedGameControllerServer) HostGame(*HostGameRequest, grpc.ServerStreamingServer[HostGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HostGame not implemented")
}
func (UnimplementedGameControllerServer) StartGame(grpc.BidiStreamingServer[StartGameRequest, StartGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameControllerServer) JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGameControllerServer) PlayGame(grpc.BidiStreamingServer[PlayGameRequest, PlayGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedGameControllerServer) mustEmbedUnimplementedGameControllerServer() {}
func (UnimplementedGameControllerServer) testEmbeddedByValue()                        {}

// UnsafeGameControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameControllerServer will
// result in compilation errors.
type UnsafeGameControllerServer interface {
	mustEmbedUnimplementedGameControllerServer()
}

func RegisterGameControllerServer(s grpc.ServiceRegistrar, srv GameControllerServer) {
	// If the following call pancis, it indicates UnimplementedGameControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameController_ServiceDesc, srv)
}

func _GameController_HostGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HostGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameControllerServer).HostGame(m, &grpc.GenericServerStream[HostGameRequest, HostGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_HostGameServer = grpc.ServerStreamingServer[HostGameResponse]

func _GameController_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameControllerServer).StartGame(&grpc.GenericServerStream[StartGameRequest, StartGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_StartGameServer = grpc.BidiStreamingServer[StartGameRequest, StartGameResponse]

func _GameController_JoinGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameControllerServer).JoinGame(m, &grpc.GenericServerStream[JoinGameRequest, JoinGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_JoinGameServer = grpc.ServerStreamingServer[JoinGameResponse]

func _GameController_PlayGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameControllerServer).PlayGame(&grpc.GenericServerStream[PlayGameRequest, PlayGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_PlayGameServer = grpc.BidiStreamingServer[PlayGameRequest, PlayGameResponse]

// GameController_ServiceDesc is the grpc.ServiceDesc for GameController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameController",
	HandlerType: (*GameControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HostGame",
			Handler:       _GameController_HostGame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartGame",
			Handler:       _GameController_StartGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "JoinGame",
			Handler:       _GameController_JoinGame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PlayGame",
			Handler:       _GameController_PlayGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game/game-controller.proto",
}
