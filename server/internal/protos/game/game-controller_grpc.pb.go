// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: game/game-controller.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameController_StartGame_FullMethodName                 = "/game.GameController/StartGame"
	GameController_JoinGame_FullMethodName                  = "/game.GameController/JoinGame"
	GameController_MoveMyTruckTo_FullMethodName             = "/game.GameController/MoveMyTruckTo"
	GameController_CollectGarbageWithMyTruck_FullMethodName = "/game.GameController/CollectGarbageWithMyTruck"
	GameController_DepositGarbageFromMyTruck_FullMethodName = "/game.GameController/DepositGarbageFromMyTruck"
)

// GameControllerClient is the client API for GameController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameControllerClient interface {
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartGameResponse], error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGameResponse], error)
	MoveMyTruckTo(ctx context.Context, in *MoveMyTruckToRequest, opts ...grpc.CallOption) (*MoveMyTruckToResponse, error)
	CollectGarbageWithMyTruck(ctx context.Context, in *CollectGarbageWithMyTruckRequest, opts ...grpc.CallOption) (*CollectGarbageWithMyTruckResponse, error)
	DepositGarbageFromMyTruck(ctx context.Context, in *DepositGarbageFromMyTruckRequest, opts ...grpc.CallOption) (*DepositGarbageFromMyTruckResponse, error)
}

type gameControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameControllerClient(cc grpc.ClientConnInterface) GameControllerClient {
	return &gameControllerClient{cc}
}

func (c *gameControllerClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[0], GameController_StartGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartGameRequest, StartGameResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_StartGameClient = grpc.ServerStreamingClient[StartGameResponse]

func (c *gameControllerClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinGameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameController_ServiceDesc.Streams[1], GameController_JoinGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinGameRequest, JoinGameResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_JoinGameClient = grpc.ServerStreamingClient[JoinGameResponse]

func (c *gameControllerClient) MoveMyTruckTo(ctx context.Context, in *MoveMyTruckToRequest, opts ...grpc.CallOption) (*MoveMyTruckToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveMyTruckToResponse)
	err := c.cc.Invoke(ctx, GameController_MoveMyTruckTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameControllerClient) CollectGarbageWithMyTruck(ctx context.Context, in *CollectGarbageWithMyTruckRequest, opts ...grpc.CallOption) (*CollectGarbageWithMyTruckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectGarbageWithMyTruckResponse)
	err := c.cc.Invoke(ctx, GameController_CollectGarbageWithMyTruck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameControllerClient) DepositGarbageFromMyTruck(ctx context.Context, in *DepositGarbageFromMyTruckRequest, opts ...grpc.CallOption) (*DepositGarbageFromMyTruckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositGarbageFromMyTruckResponse)
	err := c.cc.Invoke(ctx, GameController_DepositGarbageFromMyTruck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameControllerServer is the server API for GameController service.
// All implementations must embed UnimplementedGameControllerServer
// for forward compatibility.
type GameControllerServer interface {
	StartGame(*StartGameRequest, grpc.ServerStreamingServer[StartGameResponse]) error
	JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinGameResponse]) error
	MoveMyTruckTo(context.Context, *MoveMyTruckToRequest) (*MoveMyTruckToResponse, error)
	CollectGarbageWithMyTruck(context.Context, *CollectGarbageWithMyTruckRequest) (*CollectGarbageWithMyTruckResponse, error)
	DepositGarbageFromMyTruck(context.Context, *DepositGarbageFromMyTruckRequest) (*DepositGarbageFromMyTruckResponse, error)
	mustEmbedUnimplementedGameControllerServer()
}

// UnimplementedGameControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameControllerServer struct{}

func (UnimplementedGameControllerServer) StartGame(*StartGameRequest, grpc.ServerStreamingServer[StartGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameControllerServer) JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinGameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGameControllerServer) MoveMyTruckTo(context.Context, *MoveMyTruckToRequest) (*MoveMyTruckToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveMyTruckTo not implemented")
}
func (UnimplementedGameControllerServer) CollectGarbageWithMyTruck(context.Context, *CollectGarbageWithMyTruckRequest) (*CollectGarbageWithMyTruckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectGarbageWithMyTruck not implemented")
}
func (UnimplementedGameControllerServer) DepositGarbageFromMyTruck(context.Context, *DepositGarbageFromMyTruckRequest) (*DepositGarbageFromMyTruckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositGarbageFromMyTruck not implemented")
}
func (UnimplementedGameControllerServer) mustEmbedUnimplementedGameControllerServer() {}
func (UnimplementedGameControllerServer) testEmbeddedByValue()                        {}

// UnsafeGameControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameControllerServer will
// result in compilation errors.
type UnsafeGameControllerServer interface {
	mustEmbedUnimplementedGameControllerServer()
}

func RegisterGameControllerServer(s grpc.ServiceRegistrar, srv GameControllerServer) {
	// If the following call pancis, it indicates UnimplementedGameControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameController_ServiceDesc, srv)
}

func _GameController_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameControllerServer).StartGame(m, &grpc.GenericServerStream[StartGameRequest, StartGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_StartGameServer = grpc.ServerStreamingServer[StartGameResponse]

func _GameController_JoinGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameControllerServer).JoinGame(m, &grpc.GenericServerStream[JoinGameRequest, JoinGameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameController_JoinGameServer = grpc.ServerStreamingServer[JoinGameResponse]

func _GameController_MoveMyTruckTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveMyTruckToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameControllerServer).MoveMyTruckTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameController_MoveMyTruckTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameControllerServer).MoveMyTruckTo(ctx, req.(*MoveMyTruckToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameController_CollectGarbageWithMyTruck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectGarbageWithMyTruckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameControllerServer).CollectGarbageWithMyTruck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameController_CollectGarbageWithMyTruck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameControllerServer).CollectGarbageWithMyTruck(ctx, req.(*CollectGarbageWithMyTruckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameController_DepositGarbageFromMyTruck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositGarbageFromMyTruckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameControllerServer).DepositGarbageFromMyTruck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameController_DepositGarbageFromMyTruck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameControllerServer).DepositGarbageFromMyTruck(ctx, req.(*DepositGarbageFromMyTruckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameController_ServiceDesc is the grpc.ServiceDesc for GameController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameController",
	HandlerType: (*GameControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveMyTruckTo",
			Handler:    _GameController_MoveMyTruckTo_Handler,
		},
		{
			MethodName: "CollectGarbageWithMyTruck",
			Handler:    _GameController_CollectGarbageWithMyTruck_Handler,
		},
		{
			MethodName: "DepositGarbageFromMyTruck",
			Handler:    _GameController_DepositGarbageFromMyTruck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGame",
			Handler:       _GameController_StartGame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinGame",
			Handler:       _GameController_JoinGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game/game-controller.proto",
}
